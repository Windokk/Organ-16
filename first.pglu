; === Immediate Values ===
MOV R1, 0x0005         ; R1 = 5
MOV R2, 0x0003         ; R2 = 3
MOV R3, 0xFFFF         ; R3 = -1 (used for NOT test)
MOV R4, 0x0010         ; R4 = memory address 0x0010

; === Arithmetic ===
ADD R5, R1, R2         ; R5 = 5 + 3 = 8
SUB R6, R1, R2         ; R6 = 5 - 3 = 2
MUL R7, R1, R2         ; R7 = 5 * 3 = 15
DIV R0, R1, R2         ; R0 = 5 / 3 = 1
MOD R0, R1, R2         ; R0 = 5 % 3 = 2 (reuse R0)

; === Logic ===
AND R5, R1, R2         ; R5 = 5 AND 3 = 1
OR  R6, R1, R2         # R6 = 5 OR 3 = 7
NAND R7, R1, R2        ; R7 = ~(5 AND 3) = -2
NOR R0, R1, R2         # R0 = ~(5 OR 3) = -8
XOR R5, R1, R2         ; R5 = 5 XOR 3 = 6
NOT R6, R3             # R6 = NOT 0xFFFF = 0x0000

; === CMP + Conditional Jumps ===
CMP R1, R2             # 5 - 3 â†’ not equal
JE  SKIP1              # Should NOT jump
JNE SETFLAG            ; Should jump
MOV R0, 0xEEEE         ; Should be skipped

SETFLAG:
    MOV R0, 0xABCD         # R0 = 0xABCD if jump worked

SKIP1:
    CMP R1, R1             ; equal (5 == 5)
    JE  LABEL1             ; Should jump
    MOV R0, 0xDEAD         ; Should be skipped

LABEL1:
    ; === Unsigned conditional jumps ===
    CMP R2, R1             ; 3 < 5
    JB  LABEL2             ; Should jump
    MOV R0, 0xBEEF         ; Should be skipped