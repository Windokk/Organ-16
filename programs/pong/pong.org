; Pong for Organ16 Assembly v1.0.0

@define SCREEN_WIDTH   128
@define SCREEN_HEIGHT  128

@define N_MAX_SCORE 10
@define N_MAX_ROUNDS 19

@define PADDLE_HEIGHT 8

@define PLAYER1_UP_ADDR 0xFF00
@define PLAYER1_DOWN_ADDR 0xFF01
@define PLAYER2_UP_ADDR 0xFF02
@define PLAYER2_DOWN_ADDR 0xFF03

@define FRAMEBUFFER 0x8000

@define ZERO   0
@define ONE    1
 
@define BLACK ZERO
@define WHITE 0xFFFF

; Memory locations
@define BALL_X          0xc000
@define BALL_Y          0xc001
@define PADDLE1_Y       0xc002
@define PADDLE2_Y       0xc003

@define PADDLE1_X       3
@define PADDLE2_X       125

@define BALL_DX         0xc004
@define BALL_DY         0xc005

@define OLD_BALL_X      0xc006
@define OLD_BALL_Y      0xc007

@define PADDLE_MAX   0xc008

@define ROUND_COUNTER 0xc009

@define FIRST_ROUND_START_DX 0xc020
@define FIRST_ROUND_START_DY 0xc033

pre_init:
    MOV R0, -1
    STORE R0, FIRST_ROUND_START_DX
    STORE R0, (FIRST_ROUND_START_DX + 2)
    STORE R0, (FIRST_ROUND_START_DX + 4)
    STORE R0, (FIRST_ROUND_START_DX + 6)
    STORE R0, (FIRST_ROUND_START_DX + 8)
    STORE R0, (FIRST_ROUND_START_DX + 10)
    STORE R0, (FIRST_ROUND_START_DX + 12)
    STORE R0, (FIRST_ROUND_START_DX + 14)
    STORE R0, (FIRST_ROUND_START_DX + 16)
    STORE R0, (FIRST_ROUND_START_DX + 18)

    STORE R0, (FIRST_ROUND_START_DY + 1)
    STORE R0, (FIRST_ROUND_START_DY + 3)
    STORE R0, (FIRST_ROUND_START_DY + 5)
    STORE R0, (FIRST_ROUND_START_DY + 7)
    STORE R0, (FIRST_ROUND_START_DY + 9)
    STORE R0, (FIRST_ROUND_START_DY + 11)
    STORE R0, (FIRST_ROUND_START_DY + 13)
    STORE R0, (FIRST_ROUND_START_DY + 15)
    STORE R0, (FIRST_ROUND_START_DY + 17)
    STORE R0, (FIRST_ROUND_START_DY + 19)

    MOV R0, 1
    STORE R0, (FIRST_ROUND_START_DX + 1)
    STORE R0, (FIRST_ROUND_START_DX + 3)
    STORE R0, (FIRST_ROUND_START_DX + 5)
    STORE R0, (FIRST_ROUND_START_DX + 7)
    STORE R0, (FIRST_ROUND_START_DX + 9)
    STORE R0, (FIRST_ROUND_START_DX + 11)
    STORE R0, (FIRST_ROUND_START_DX + 13)
    STORE R0, (FIRST_ROUND_START_DX + 15)
    STORE R0, (FIRST_ROUND_START_DX + 17)
    STORE R0, (FIRST_ROUND_START_DX + 19)

    STORE R0, FIRST_ROUND_START_DY
    STORE R0, (FIRST_ROUND_START_DY + 2)
    STORE R0, (FIRST_ROUND_START_DY + 4)
    STORE R0, (FIRST_ROUND_START_DY + 6)
    STORE R0, (FIRST_ROUND_START_DY + 8)
    STORE R0, (FIRST_ROUND_START_DY + 10)
    STORE R0, (FIRST_ROUND_START_DY + 12)
    STORE R0, (FIRST_ROUND_START_DY + 14)
    STORE R0, (FIRST_ROUND_START_DY + 16)
    STORE R0, (FIRST_ROUND_START_DY + 18)


main:

    ; Initialize round counter at 0
    MOV R0, ZERO
    STORE R0, ROUND_COUNTER

    JSR start_round

    gameLoop:
        
        ### Store old ball ###
        LOAD R0, BALL_X
        LOAD R1, BALL_Y
        STORE R0, OLD_BALL_X
        STORE R1, OLD_BALL_Y

        MOV R6, 0

        ### Walls collision ###

            LOAD R6, BALL_DX
            LOAD R7, BALL_DY

            ; Screen boundaries
            MOV R3, (SCREEN_WIDTH - 1)
            MOV R4, (SCREEN_HEIGHT - 1)

            ; Check X collision (left/right)
            MOV R5, ZERO
            CMP R0, R5  ; left
            JE dx_plus_1

            CMP R0, R3 ; right
            JE dx_minus_1

        y_collision:
            ; Check Y collision (top/bottom)
            MOV R5, ZERO ; Top
            CMP R1, R5
            JE dy_plus_1

            CMP R1, R4   ; Bottom
            JE dy_minus_1

            JMP paddle_collision

        dx_plus_1:
            MOV R5, 1
            STORE R5, BALL_DX
            JMP y_collision

        dx_minus_1:
            MOV R5, -1
            STORE R5, BALL_DX
            JMP y_collision

        dy_plus_1:
            MOV R5, 1
            STORE R5, BALL_DY
            JMP paddle_collision

        dy_minus_1:
            MOV R5, -1
            STORE R5, BALL_DY
            JMP paddle_collision


        ### Paddle collision ###
        paddle_collision:
            LOAD R0, BALL_X

            MOV R1, (PADDLE1_X + 1)
            MOV R2, (PADDLE2_X - 1)

            CMP R0, R2
            JE paddle_right_collision

            CMP R0, R1
            JNE ball_pos_subr

            LOAD R0, BALL_Y
            LOAD R1, PADDLE1_Y      ; R1 = PADDLE TOP
            MOV R2, PADDLE_HEIGHT
            ADD R2, R1, R2          ; R2 = PADDLE BOTTOM

            CMP R0, R1
            JB ball_pos_subr

            CMP R0, R2
            JA ball_pos_subr

            MOV R0, 1
            STORE R0, BALL_DX

            JMP ball_pos_subr
        

        ### Update ball position ###
        ball_pos_subr:

            LOAD R0, BALL_X
            LOAD R2, BALL_DX
            
            MOV R4, 0
            CMP R2, R4
            JL x_minus_1
            JG x_plus_1

        comparisonY:
            LOAD R1, BALL_Y
            LOAD R3, BALL_DY

            MOV R4, 0
            CMP R3, R4
            JL y_minus_1
            JG y_plus_1
        
        draw_subr:

            LOAD R0, OLD_BALL_X
            LOAD R1, OLD_BALL_Y
            
            MOV R2, BLACK
            JSR draw_pixel

            LOAD R0, BALL_X
            LOAD R1, BALL_Y

            MOV R2, WHITE
            JSR draw_pixel ; Draw the ball

            MOV R0, PADDLE1_X
            LOAD R1, PADDLE1_Y
            MOV R2, WHITE
            JSR draw_paddle ; Draw the left paddle

            MOV R0, PADDLE2_X
            LOAD R1, PADDLE2_Y
            MOV R2, WHITE
            JSR draw_paddle ; Draw the right paddle

            JMP gameLoop


end:
    HLT

start_round:

    ; Initialize ball in center
    MOV R0, (SCREEN_WIDTH / 2)
    MOV R1, (SCREEN_HEIGHT / 2)
    STORE R0, BALL_X
    STORE R1, BALL_Y

    ; Initialize paddle 1 at vcenter
    MOV R0, 1
    STORE R0, PADDLE1_Y

    ; Initialize paddle 2 at vcenter
    STORE R0, PADDLE2_Y

    LOAD R0, ROUND_COUNTER
    LOAD R7, FIRST_ROUND_START_DX
    ADD R7, R7, R0                   ; This round's initial DX is stored at FIRST_ROUND_START_DX + ROUND_COUNTER
    LOADR R0, R7
    STORE R0, BALL_DX

    LOAD R1, ROUND_COUNTER
    LOAD R7, FIRST_ROUND_START_DY    ; This round's initial DY is stored at FIRST_ROUND_START_DY + ROUND_COUNTER
    ADD R7, R7, R1
    LOADR R1, R7
    STORE R1, BALL_DY

    LOAD R0, ROUND_COUNTER  ; Round Counter += 1
    MOV R1, 1
    ADD R0, R0, R1
    STORE R0, ROUND_COUNTER

    RTS

x_minus_1:
    ; Parameters
    ; R0 = X
    MOV R7, 1
    SUB R0, R0, R7
    STORE R0, BALL_X
    JMP comparisonY

x_plus_1:
    ; Parameters
    ; R0 = X
    MOV R7, 1
    ADD R0, R0, R7
    STORE R0, BALL_X
    JMP comparisonY

y_minus_1:
    ; Parameters
    ; R1 = Y
    MOV R7, 1
    SUB R1, R1, R7
    STORE R1, BALL_Y
    JMP draw_subr

y_plus_1:
    ; Parameters
    ; R1 = Y
    MOV R7, 1
    ADD R1, R1, R7
    STORE R1, BALL_Y
    JMP draw_subr

draw_pixel:
    ; Parameters: 
    ; R0 = X 
    ; R1 = Y 
    ; R2 = Color

    MOV       R4, SCREEN_WIDTH
    MOV       R7, FRAMEBUFFER
    MUL       R5, R1, R4            ; R5 = Y * SCREEN_WIDTH
    ADD       R5, R5, R0            ; R5 = Y * SCREEN_WIDTH + X (offset)
    ADD       R5, R7, R5   ; R5 = FRAMEBUFFER + offset
    STORER    R2, R5
    RTS

draw_paddle:
    ; Parameters: R0 = X, R1 = Y, R2 = Color

    MOV R3, PADDLE_HEIGHT
    ADD R3, R1, R3
    STORE R3, PADDLE_MAX         ; R3 = bottom Y of paddle
    MOV R6, 0
    ADD R6, R6, R0               ; Save original X in R6

    draw_paddle_loop:
        MOV R4, 1
        ADD R1, R1, R4
        JSR draw_pixel
        
        LOAD R3, PADDLE_MAX
        CMP R1, R3
        JNE draw_paddle_loop  # Continue if padde max is not yet reached by R1

    RTS

paddle_right_collision:
    LOAD R0, BALL_Y
    LOAD R1, PADDLE2_Y      ; R1 = PADDLE TOP
    MOV R2, PADDLE_HEIGHT
    ADD R2, R1, R2          ; R2 = PADDLE BOTTOM

    CMP R0, R1
    JB ball_pos_subr

    CMP R0, R2
    JA ball_pos_subr

    MOV R0, -1
    STORE R0, BALL_DX
    
    JMP ball_pos_subr